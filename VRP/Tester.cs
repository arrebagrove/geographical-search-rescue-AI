//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;

public class Tester{

	public Tester(Vector3[] customers, Drone[] drones){
		/* Initialize Chromosome static singleton variables 
		 * (mapping between coding of solution and real points) */
		Chromosome.initChromosome (customers, drones);
	}

	public void testEquality(){

		Chromosome c1 = new Chromosome();
		Chromosome c2 = new Chromosome();

		Debug.Log("Equality check:"+c1.Equals(c2));
		Debug.Log("c1 hash:"+c1.GetHashCode());
		Debug.Log("c2 hash:"+c2.GetHashCode());

		HashSet<Chromosome> map = new HashSet<Chromosome>();
		map.Add(c1);
		if(map.Contains(c2)) Debug.Log("nell'hash table ce ne sta uno uguale!");

	/*	Vector3 v1 = new Vector3(2,2,2);
		Vector3 v2 = new Vector3(2,2,2);
		Debug.Log("Equality check:"+v1.Equals(v2));
		Debug.Log("v1 hash:"+v1.GetHashCode());
		Debug.Log("v2 hash:"+v2.GetHashCode()); */

	}

	public bool testFitness (){

		Chromosome c1 = new Chromosome (new int[]{4,0,1,2,5,3});
		VRPsolution csol = c1.buildSolution ();
		csol.debugSolution ();
//		Debug.Log (csol);
		//Chromosome c1 = new Chromosome ();
		Debug.Log("Fitness: "+ c1.getFitness ());

		return true;

	}

	private bool testOX(int[] pv1,int[] pv2, int[] sv1,int[] sv2, int cut1,int cut2){
	
		Chromosome p1 = new Chromosome (pv1);
		Chromosome p2 = new Chromosome (pv2);
		Chromosome s1 = new Chromosome (sv1);
		Chromosome s2 = new Chromosome (sv2);
		Debug.Log ("p1: "+p1);
		Debug.Log ("p2: "+p2);	

		Chromosome[] res = p1.orderCrossover (p2,cut1,cut2);
		Debug.Log ("o1: "+res[0]);
		Debug.Log ("o2: "+res[1]);

		/* != overloaded for Chromosome*/
		if (res [0] != s1 || res [1] != s2){
			Debug.Log("Error order crossover, cut: "+cut1+","+cut2);
			return false;
		}

		return true;
	}

	public bool testOrderCrossover(){
	
		int[] pv1 = new int[]{0,7,3,1,6,2,5,4};
		int[] pv2 = new int[]{3,5,1,0,2,6,4,7};

		/* solutions with cuts at index 2 and 5 */
		int[] sv1 = new int[]{5,0,3,1,6,2,4,7};
		int[] sv2 = new int[]{7,3,1,0,2,6,5,4};

		/* solutions with cuts at index 1 and 4 */
		int[] sv7 = new int[]{2, 7, 3, 1, 6, 4, 5, 0};
		int[] sv8 = new int[]{6, 5, 1, 0, 2, 4, 7, 3};

		/* solutions with cuts at the same index, no crossover, offspring equal to parents*/
		int[] sv3 = new int[]{0,7,3,1,6,2,5,4};
		int[] sv4 = new int[]{3,5,1,0,2,6,4,7};

		/* solutions with cuts at index 0 and last (7) */
		int[] sv5 = new int[]{0,7,3,1,6,2,5,4};
		int[] sv6 = new int[]{3,5,1,0,2,6,4,7};

		if (testOX (pv1, pv2, sv1, sv2, 2, 5) == false)return false;
		if (testOX (pv1, pv2, sv7, sv8, 1, 4) == false)return false;

		Chromosome.N = 6;
		Chromosome.M = 2;

		/* Random data test */
		Debug.Log("Random data test");
		Chromosome p1 = new Chromosome ();
		Chromosome p2 = new Chromosome ();
		Debug.Log ("p1: "+p1);
		Debug.Log ("p2: "+p2);	
		Chromosome[] res = p1.orderCrossover (p2,1,5);
		Debug.Log ("o1: "+res[0]);
		Debug.Log ("o2: "+res[1]);

		return true;
	}

	public void testShuffle(){
		int uno = 0, due = 0,tre=0,quattro=0,cinque=0,sei=0;
		int[] ar1 = new int[3]{1,2,3};
		Chromosome.N = 2;
		Chromosome.M = 1;
		Chromosome cmio = new Chromosome ();
		for (int i=0; i<600000; i++) {
			MyUtils.FisherYatesShuffle(ar1);
			if(ar1[0]==1 && ar1[1] ==2) uno++;
			if(ar1[0]==1 && ar1[1] ==3) due++;
			if(ar1[0]==2 && ar1[1] ==1) tre++;
			if(ar1[0]==2 && ar1[1] ==3) quattro++;
			if(ar1[0]==3 && ar1[1] ==1) cinque++;
			if(ar1[0]==3 && ar1[1] ==2) sei++;
			ar1[0] = 1;
			ar1[1] = 2;
			ar1[2] = 3;
		}
		
		Debug.Log("prima conf: "+uno);
		Debug.Log("seconda conf: "+due);
		Debug.Log("seconda conf: "+tre);
		Debug.Log("seconda conf: "+quattro);
		Debug.Log("seconda conf: "+cinque);
		Debug.Log("seconda conf: "+sei);
	}

}

